name: Publish Docker Images

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # schedule:
  #   - cron: '23 17 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  


env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io


jobs:
  discover-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Find Dockerfiles and set matrix
        id: set-matrix
        run: |
          dockerfiles=$(find . -name "Dockerfile" -type f | sed 's|^\./||')
          matrix_json="["
          first=true
          for dockerfile in $dockerfiles; do
            context=$(dirname "$dockerfile")
            image_name=$(echo "$context" | tr '/' '-')
            if [ "$first" = true ]; then
              first=false
            else
              matrix_json+=","
            fi
            matrix_json+="{\"dockerfile\":\"$dockerfile\",\"context\":\"$context\",\"image\":\"$image_name\"}"
          done
          matrix_json+="]"
          echo "matrix=${matrix_json}" >> $GITHUB_OUTPUT
          echo "Found Dockerfiles:"
          echo "${matrix_json}" | jq .

  build:
    needs: discover-dockerfiles
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.discover-dockerfiles.outputs.matrix) }}
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.dockerfile.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }},onlatest=true

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ matrix.dockerfile.context }}
          file: ${{ matrix.dockerfile.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  manifest:
    needs: [discover-dockerfiles, build]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.discover-dockerfiles.outputs.matrix) }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 同一のタグ規則で “サフィックスなし” のタグリストを再生成
      - name: Extract Docker metadata (manifest, no suffix)
        id: meta_manifest
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create and push multi-arch manifests
        env:
          TAGS: ${{ steps.meta_manifest.outputs.tags }}
        run: |
          set -euo pipefail
          echo "${TAGS}" | tr ' ' '\n' | sed '/^$/d' | while read -r TAG; do
            echo "Creating manifest for ${TAG}"
            docker buildx imagetools create \
              -t "${TAG}" \
              "${TAG}-amd64" \
              "${TAG}-arm64"
            docker buildx imagetools inspect "${TAG}"
          done
